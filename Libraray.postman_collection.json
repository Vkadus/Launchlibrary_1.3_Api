{
	"info": {
		"_postman_id": "176085a8-e6bd-404c-bea0-3ef5eab5b23c",
		"name": "Libraray",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Agency",
			"item": [
				{
					"name": "Agency-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b19b601-afc8-4d50-88a4-adf859bd9f55",
								"exec": [
									"console.log(\"start\");",
									"",
									"var abcd=data.Agency_id_name;",
									"console.log(abcd);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Test Name is Responce\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.agencies[0].name).to.eql(abcd);",
									"});",
									"console.log(\"suncess\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46c48339-5b69-4eac-9cd3-df7565f42f1c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/agency?id={{Agency_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"agency"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Agency_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agency with an abbreviation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80cd3d85-7955-42ed-a9a2-28c78c3a870c",
								"exec": [
									"console.log(\"Agency with an abbreviation start\");",
									"var abc=data.Agency_id;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Agency with abbre\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.agencies[0].id).to.eql(abc);",
									"});",
									"",
									"console.log(\"Agency with an abbreviation End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/agency?abbrev={{Agency_abbrev}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"agency"
							],
							"query": [
								{
									"key": "abbrev",
									"value": "{{Agency_abbrev}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Keyword - Match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9cfda8b-7833-4a78-9b1f-e196cab5b48f",
								"exec": [
									"console.log(\"Agency with keyword start\");",
									"var abc=data.Agency_id_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Test Name is Responce\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.agencies[6].name).to.eql(abc);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/agency?name={{keyword}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"agency"
							],
							"query": [
								{
									"key": "name",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agency Type",
			"item": [
				{
					"name": "Agency Type-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c909ed-bda5-42be-bec2-54f1c719c2d5",
								"exec": [
									"console.log(\"Agency Type with id start\");",
									"var abc=data.Agency_Type_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Agency Type with name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].name).to.eql(abc);",
									"});",
									"console.log(\"Agency Type with id End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/agencytype?id={{Agency_Type_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"agencytype"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Agency_Type_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Agency Type-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2e859b7-19c8-40c8-8f46-50bda7a61344",
								"exec": [
									"console.log(\"Agency Type with name start\");",
									"var abc=data.Agency_Type_id;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Agency Type with name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].id).to.eql(abc);",
									"});",
									"console.log(\"Agency Type with name End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/agencytype?name={{Agency_Type_name}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"agencytype"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Agency_Type_name}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event-type",
			"item": [
				{
					"name": "Event Type-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d668ee6-6291-4b0f-b327-f89371d8de7a",
								"exec": [
									"console.log(\"Event Type with ID start\");",
									"var abc=data.Event_Type_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Agency Type with name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].name).to.eql(abc);",
									"});",
									"console.log(\"Event Type with ID End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/eventtype?id={{Event_Type_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"eventtype"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Event_Type_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event-Type-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "577097b8-a568-4ab8-9524-b9550e81abff",
								"exec": [
									"console.log(\"Event Type with name start\");",
									"var abc=data.Event_Type_id;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Agency Type with name\", function () ",
									"{",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].id).to.eql(abc);",
									"});",
									"console.log(\"Event Type with name End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/eventtype?name={{Event_Type_name}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"eventtype"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Event_Type_name}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Launch",
			"item": [
				{
					"name": "Launch-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9468315d-17c5-4b98-833d-8f1c08c0abc6",
								"exec": [
									"console.log(\"Launch Type with id start\");",
									"var abc=data.Launch_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Agency Type with name\", function () ",
									"{",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.launches[0].name).to.eql(abc);",
									"});",
									"console.log(\"Launch Type with id End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?id={{Launch_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Launch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Launch-Falcon",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07f443a7-ad83-4fd9-8af8-971a37629e42",
								"exec": [
									"console.log(\"Launch Type with keyword start\");",
									"var pq=data.Launch_keyword;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Falcon\");",
									"});",
									"",
									"    var jsonData = pm.response.json();",
									"    var ab=jsonData.count;",
									"    console.log(ab);",
									"    var x=0;",
									"for(var i=0;i<ab;i++)",
									"",
									"{    ",
									"    var str=jsonData.launches[i].name;",
									"    ",
									"    if(str.includes(\"Falcon\"))",
									"    {",
									"        x++;",
									"    }",
									"    ",
									"}",
									"console.log(x);",
									"",
									"pm.test(\"Our JSON is loosely equal to the provided JSON\", function () {",
									"   pm.expect(ab).to.deep.equal(x);",
									"  });",
									"",
									"console.log(\"Launch Type with keyword end\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?name={{Launch_keyword}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Launch_keyword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Launch-next 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdddbe94-d385-4f23-9195-e65c192f51dc",
								"exec": [
									" console.log(\"No .Of Launches start\");",
									" ",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"var cd=data.Launch_num;",
									" ",
									" var jsonData = pm.response.json();",
									"    var ab=jsonData.count;",
									"    console.log(ab);",
									"    ",
									"    pm.test(\"No of Launches in Responce\", function () {",
									"   pm.expect(cd).to.deep.equal(ab);",
									"  });",
									"  ",
									"   console.log(\"No .Of Launches End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?next={{Launch_num}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "next",
									"value": "{{Launch_num}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": " Launches between Two Dates:",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1a5cc33-df9d-45ea-8c8e-ce2f8cc5f484",
								"exec": [
									" console.log(\"No .Of Launches between two Date\");  ",
									" ",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"    var From_Date=data.Lunch_Date_from;",
									"    ",
									"    var To_Date=data.Lunch_Date_to; ",
									"    ",
									"    var my1 = new Date(From_Date);",
									"     ",
									"    var my2 = new Date(To_Date);",
									"    ",
									"  var jsonData = pm.response.json();",
									"    var ab=jsonData.count;",
									"    console.log(ab);",
									"    var count=0;",
									"    for(var cd=0;cd<ab;cd++)",
									"    {",
									"    var mydate = new Date(jsonData.launches[cd].net);",
									"    ",
									"    if(mydate<my1 && mydate>my2)",
									"    {",
									"        count++;",
									"    }",
									"    }",
									"console.log(count);    ",
									"pm.test(\"Data between two Date\", function () {",
									"   pm.expect(0).to.deep.equal(count);",
									"  });",
									" console.log(\"No .Of Launches between two Date End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?startdate={{Lunch_Date_from}}&enddate={{Lunch_Date_to}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "startdate",
									"value": "{{Lunch_Date_from}}"
								},
								{
									"key": "enddate",
									"value": "{{Lunch_Date_to}}"
								}
							]
						},
						"description": " launches between August 20th, 2015 and September 20th, 2015\n \n it is not giving result for when start and end date is same."
					},
					"response": []
				},
				{
					"name": "Launch-After Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f361f99a-e220-4468-894f-dc88df74a485",
								"exec": [
									"console.log(\"No .Of After Date\");  ",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									"",
									"var From_Date=data.Lunch_Date_from;",
									"  ",
									"    var my1 = new Date(From_Date);",
									"    ",
									"    var jsonData = pm.response.json();",
									"    var ab=jsonData.count;",
									"    console.log(ab);",
									"    var counti=0;",
									"    for(var cd=0;cd<ab;cd++)",
									"    {",
									"    var mydate = new Date(jsonData.launches[cd].net);",
									"    if(mydate<my1)",
									"    {",
									"        console.log(mydate1);",
									"        counti++;",
									"    }",
									"    }",
									"console.log(counti);    ",
									"",
									"pm.test(\"Data After Date\", function () {",
									"   pm.expect(0).to.deep.equal(counti);",
									"  });",
									"  ",
									" console.log(\"No .Of Launches After Date End\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?startdate={{Lunch_Date_from}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "startdate",
									"value": "{{Lunch_Date_from}}"
								}
							]
						},
						"description": "To return launches after August 20th, 2015:\r\n"
					},
					"response": []
				},
				{
					"name": "Launch-id and location ,name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d16e12c5-3e7e-4bce-be54-20eab7c38fb3",
								"exec": [
									"console.log(\"No .Of After Date\"); ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var ab=data.Launch_idl_name;",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.launches[0].name).to.eql(ab);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?id={{Launch_idL}}&fields=name,locationid",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Launch_idL}}"
								},
								{
									"key": "fields",
									"value": "name,locationid"
								}
							]
						},
						"description": "To return the launch with the id of 20 and the fields name and location id only:"
					},
					"response": []
				},
				{
					"name": "Launch-ICS format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "155926b0-5826-4f12-8612-60e4c93f4ae4",
								"exec": [
									"  console.log(\"No .Of Launches in Perticular Format End\");",
									" ",
									" var ab=data.Launch_Format;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var loc = pm.response.headers.get(\"Content-Type\");",
									"var cd=loc.split(';');",
									"console.log(cd[0]);",
									"var cd1=cd[0];",
									"",
									"var xy= false;",
									"if(ab=='ICS')",
									"{",
									"    if(cd1=='text/calendar')",
									"    {",
									"        xy=true;",
									"    }",
									"    ",
									"}",
									"else",
									"if(ab=='json')",
									"{",
									"    if(cd1=='application/json')",
									"    {",
									"        xy=true;",
									"    }",
									"    ",
									"}",
									"",
									"pm.test(\"Data After Date\", function () {",
									"   pm.expect(true).to.deep.equal(true);",
									"  });",
									" console.log(\"No .Of Launches in Perticular Format End\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch/1998?format=ics",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch",
								"1998"
							],
							"query": [
								{
									"key": "format",
									"value": "ics",
									"description": "{{Launch_Format}}"
								}
							]
						},
						"description": "To return the launch with the id of 20 in ICS format:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Launch-Event  not working",
			"item": [
				{
					"name": "Launch-Event-id not received responce",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cba34b0f-0056-4ad3-8017-8a30e1c53418",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://launchlibrary.net/1.3/launchevent/7",
							"protocol": "https",
							"host": [
								"launchlibrary",
								"net"
							],
							"path": [
								"1.3",
								"launchevent",
								"7"
							]
						},
						"description": "To return the launch event with an ID of 7:\r\n"
					},
					"response": []
				},
				{
					"name": "Launch-Event-parentid no responce",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://launchlibrary.net/1.3/launchevent?parentid=12",
							"protocol": "https",
							"host": [
								"launchlibrary",
								"net"
							],
							"path": [
								"1.3",
								"launchevent"
							],
							"query": [
								{
									"key": "parentid",
									"value": "12"
								}
							]
						},
						"description": "To return the launch event with a launch id of 12:"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "41f86e75-57e1-4f67-92e1-1fc00fdc40be",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6f04d134-8182-4c92-ad4b-09627c075446",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Launch Status",
			"item": [
				{
					"name": "Launch status with an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ce85e2b-9386-4352-bcde-0b448943b2bb",
								"exec": [
									"console.log(\"Launch status with id Start\");",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var ab=data.Launch_status_name;",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].name).to.eql(ab);",
									"});",
									"",
									"",
									"console.log(\"Launch status with id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launchstatus?id={{Launch_status_ID}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launchstatus"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Launch_status_ID}}"
								}
							]
						},
						"description": "To return the launc status with an ID of 1:\r\n"
					},
					"response": []
				},
				{
					"name": "Launch status with a name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f328551-1f78-4260-979d-a5c87a1cf1f6",
								"exec": [
									"console.log(\"Launch status with name start\");",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var ab= data.Launch_status_ID;",
									"var jsonData= pm.response.json();",
									"var vd= jsonData.types[0].id;",
									"",
									"",
									"",
									"",
									"pm.test(\"Data between two Date\", function () {",
									"   pm.expect(ab).to.deep.equal(vd);",
									"  });",
									"",
									"console.log(\"Launch status with start end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launchstatus?name={{Launch_status_name}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launchstatus"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Launch_status_name}}"
								}
							]
						},
						"description": "To return the launch status with a name of GREEN:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": " Location with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42ca0f0e-53b3-4f04-923c-f9615898213e",
								"exec": [
									"console.log(\"Location with id start\");",
									"var ab=data.Location_name;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.locations[0].name).to.eql(ab);",
									"});",
									"",
									"console.log(\"Location with id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/location?id={{Location_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"location"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Location_id}}"
								}
							]
						},
						"description": " location with an ID of 1:"
					},
					"response": []
				},
				{
					"name": "Location with a name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f37cf3-f24b-4ba9-a049-a754165ea0d7",
								"exec": [
									"console.log(\"Location with name keyword start\");",
									"",
									"var ab= data.Location_id;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.locations[0].id).to.eql(ab);",
									"});",
									"",
									"",
									"",
									"console.log(\"Location with name keyword end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/location?name={{Location_name_keyword}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"location"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Location_name_keyword}}"
								}
							]
						},
						"description": "To return the location with a name of Woomera:\r\n"
					},
					"response": []
				},
				{
					"name": "Location withing the Country:",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79cc809c-2269-43d6-bbb5-bad0219e5dcb",
								"exec": [
									"",
									"console.log(\"Location within country  start\");",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"console.log(\"Location within country end\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/location?countryCode={{Location_country}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"location"
							],
							"query": [
								{
									"key": "countryCode",
									"value": "{{Location_country}}"
								}
							]
						},
						"description": "To return the location withing the United States:\r\n\r\nit is giving all country location.!!!?"
					},
					"response": []
				}
			]
		},
		{
			"name": "Mission",
			"item": [
				{
					"name": "Mission with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de49a34f-0824-4795-911f-7d095d2819c7",
								"exec": [
									"console.log(\"Mission with id  start\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var ab= data.Mission_name;",
									"pm.test(\"Test mission name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.missions[0].name).to.eql(ab);",
									"});",
									"console.log(\"Mission with id  end\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/mission?id={{Mission_ID}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"mission"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Mission_ID}}"
								}
							]
						},
						"description": "To return the mission with an ID of 42:"
					},
					"response": []
				},
				{
					"name": "Mission with a name of GPS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1d2fecb-054f-4ea2-8457-203c0ff3c000",
								"exec": [
									"console.log(\"Mission with name start\");",
									"var ab= data.Mission_ID;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.missions[0].id).to.eql(ab);",
									"});",
									"",
									"console.log(\"Mission with name end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/mission?name={{Mission_keyword}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"mission"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Mission_keyword}}"
								}
							]
						},
						"description": "To return the mission with a name of GPS:\r\n"
					},
					"response": []
				},
				{
					"name": "Mission with a launch ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05d19744-f325-47a3-84dc-717dcb38b4f4",
								"exec": [
									"console.log(\"Mission with launch_id end\");",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(\"Mission with launch_id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/launch?launchid={{Launch_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"launch"
							],
							"query": [
								{
									"key": "launchid",
									"value": "{{Launch_id}}"
								}
							]
						},
						"description": "To return the mission with a launch ID of 12:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Mission Event",
			"item": [
				{
					"name": "Mission event with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0131e7a-e21e-4df9-97b3-f6778c57794b",
								"exec": [
									"console.log(\"Mission event with id start\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var ab=data.Mission_event_name;",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(ab);",
									"});",
									"",
									"console.log(\"Mission event with id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/missionevent?id={{Mission_event_ID}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"missionevent"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Mission_event_ID}}"
								}
							]
						},
						"description": "To return the mission event with an ID of 3:\r\n"
					},
					"response": []
				},
				{
					"name": "Mission event with a mission id ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d4da711-cb01-41ff-873d-3c9f72b377dd",
								"exec": [
									"console.log(\"Mission event with parentid start\");",
									"",
									"",
									"",
									"",
									"console.log(\"Mission event with parentid end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/missionevent?parentid={{Mission_event_parent_ID}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"missionevent"
							],
							"query": [
								{
									"key": "parentid",
									"value": "{{Mission_event_parent_ID}}"
								}
							]
						},
						"description": "To return the mission event with a mission id of 120:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Mission Type",
			"item": [
				{
					"name": "Mission type with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3154857d-ac11-4a0f-83ee-0b564fdd3b4c",
								"exec": [
									"console.log(\"Mission Type with id start\");",
									"",
									"var ab=data.Mission_type_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].name).to.eql(ab);",
									"});",
									"",
									"console.log(\"Mission Type with id end\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/missiontype?id={{Mission_type_ID}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"missiontype"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Mission_type_ID}}"
								}
							]
						},
						"description": "To return the mission type with an ID of 1:\r\n"
					},
					"response": []
				},
				{
					"name": "Mission type with a name of planetary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fb560ea-09d0-400b-8067-47b0107a4a69",
								"exec": [
									"console.log(\"Mission Type with name start\");",
									"",
									"var ab=data.Mission_type_ID;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.types[0].id).to.eql(ab);",
									"});",
									"",
									"console.log(\"Mission Type with name end\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/missiontype?name={{Mission_type_name}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"missiontype"
							],
							"query": [
								{
									"key": "name",
									"value": "{{Mission_type_name}}"
								}
							]
						},
						"description": "To return the mission type with a name of planetary:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Pad ",
			"item": [
				{
					"name": "Pad with an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb247e6-d110-4593-a6ff-23640a4b57f3",
								"exec": [
									"console.log(\"Pad with id start\");",
									"",
									"var ab=data.Pad_name;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pads[0].name).to.eql(ab);",
									"});",
									"",
									"console.log(\"Pad with id end\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/pad?id={{Pad_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"pad"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Pad_id}}"
								}
							]
						},
						"description": "To return the pad with an ID of 1:\r\n"
					},
					"response": []
				},
				{
					"name": "Pads with a name containing launch complex",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b78e93d7-8d7a-4e6d-be7b-73c678e82331",
								"exec": [
									"console.log(\"Pad with  keyword start\");",
									"",
									"var pq=data.Pad_keyword;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(pq);",
									"});",
									"",
									"",
									"    var jsonData = pm.response.json();",
									"    var ab=jsonData.count;",
									"    console.log(ab);",
									"    var x=0;",
									"for(var i=0;i<ab;i++)",
									"",
									"{    ",
									"    var str=jsonData.pads[i].name;",
									"    ",
									"    if(str.includes(pq))",
									"    {",
									"        x++;",
									"    }",
									"    ",
									"}",
									"console.log(x);",
									"",
									"pm.test(\"Our JSON is loosely equal to the provided JSON\", function () {",
									"   pm.expect(ab).to.deep.equal(x);",
									"  });",
									"",
									"console.log(\"Pad with  keyword  end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/pad?name=launch%20complex",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"pad"
							],
							"query": [
								{
									"key": "name",
									"value": "launch%20complex"
								}
							]
						},
						"description": "To return pads with a name containing launch complex:\r\n"
					},
					"response": []
				},
				{
					"name": "Pads with a location ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "42f427cc-d041-44b0-9d34-6de1b50e4f4c",
								"exec": [
									"console.log(\"Pad with location_id start\");",
									"",
									"var ab=data.Pad_id;",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pads[0].id).to.eql(ab);",
									"});",
									"",
									"console.log(\"Pad with location_id end\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/pad?locationid={{Pad_locationid}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"pad"
							],
							"query": [
								{
									"key": "locationid",
									"value": "{{Pad_locationid}}"
								}
							]
						},
						"description": "To return pads with a location ID of 5:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Rocket",
			"item": [
				{
					"name": "Rocket with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fd425df-a35a-4272-9bc2-3f3f51d1a530",
								"exec": [
									"console.log(\"Rocket with id start\");",
									"",
									"",
									"var ab= data.Rocket_name;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rockets[0].name).to.eql(ab);",
									"});",
									"console.log(\"Rocket with  id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocket?id={{Rocket_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocket"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Rocket_id}}"
								}
							]
						},
						"description": "To return the rocket with an ID of 1:\r\n"
					},
					"response": []
				},
				{
					"name": "Rocket with a name containing Falcon",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "654d0eac-aa40-4de9-8b03-fe95ea533886",
								"exec": [
									"console.log(\"Rocket with name start\");",
									"",
									"",
									"var ab= data.Rocket_id;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rockets[0].id).to.eql(ab);",
									"});",
									"console.log(\"Rocket with  name end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocket?name=Falcon 9 v1.1",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocket"
							],
							"query": [
								{
									"key": "name",
									"value": "Falcon 9 v1.1"
								}
							]
						},
						"description": "To return the rocket with a name containing Falcon:\r\n"
					},
					"response": []
				},
				{
					"name": "Rockets with configuration containing v1.3:",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61b7530c-be6f-4e03-9091-5854f69c00e6",
								"exec": [
									"console.log(\"Rocket with configuration start\");",
									"",
									"",
									"var ab= data.Rocket_id;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rockets[0].id).to.eql(ab);",
									"});",
									"console.log(\"Rocket with configuration end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocket?configuration={{Rocket_configuration}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocket"
							],
							"query": [
								{
									"key": "configuration",
									"value": "{{Rocket_configuration}}"
								}
							]
						},
						"description": "To return the rockets with configuration containing v1.3:\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Rocket Event",
			"item": [
				{
					"name": "Rocket event with an ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b6f422f-f674-401c-8f04-94cf0e44e90d",
								"exec": [
									"console.log(\"Rocket event with id start\");",
									"",
									"",
									"var ab= data.Rocket_event_name;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name).to.eql(ab);",
									"});",
									"console.log(\"Rocket event with id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocketevent?id={{Rocket_event_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocketevent"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Rocket_event_id}}"
								}
							]
						},
						"description": "To return the rocket event with an ID of 10:\r\n"
					},
					"response": []
				},
				{
					"name": "Rocket Launch event with a launch id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "319e2a4d-6420-472e-8fcf-39e4e4960eb1",
								"exec": [
									"console.log(\"Rocket event with parentid start\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log(\"Rocket event with parentid end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocketevent?parentid={{Rocket_event_parent_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocketevent"
							],
							"query": [
								{
									"key": "parentid",
									"value": "{{Rocket_event_parent_id}}"
								}
							]
						},
						"description": "To return the launch event with a launch id of 1 :\r\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Rocket Family",
			"item": [
				{
					"name": "Rocket family with an ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "929d60c4-4920-42ca-9a4d-c9bea6f06ada",
								"exec": [
									"console.log(\"Rocketfamily with id start\");",
									"",
									"",
									"var ab= data.Rocketfamily_name;",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.RocketFamilies[0].name).to.eql(ab);",
									"});",
									"console.log(\"Rocketfamily with id end\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Base_url}}/rocketfamily?id={{Rocketfamily_id}}",
							"host": [
								"{{Base_url}}"
							],
							"path": [
								"rocketfamily"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Rocketfamily_id}}"
								}
							]
						},
						"description": "To return the rocket family with an ID of 1:\r\n"
					},
					"response": []
				}
			]
		}
	]
}